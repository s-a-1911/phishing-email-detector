import imaplib
import email
from email.header import decode_header
import tkinter as tk
from tkinter import scrolledtext
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.pipeline import make_pipeline
import numpy as np


EMAIL_USER = "INSERT GMAIL ADDRESS"  
EMAIL_PASS = "INSERT GMAIL APPLICATION PASSWORD"  

# Sample dataset for training
sample_data = [
    ("Congratulations, you've won a prize! Claim it now!", 1),  # Phishing
    ("Important notice about your account", 1),  # Phishing
    ("Meeting tomorrow at 10 AM", 0),  # Legitimate
    ("Your invoice for the recent purchase", 0),  # Legitimate
    ("Urgent: Your bank account has been compromised", 1),  # Phishing
    ("Reminder: Payment due for your subscription", 0),  # Legitimate
]

# Separate the emails and labels
texts, labels = zip(*sample_data)

# Create a pipeline that combines TfidfVectorizer and LogisticRegression
model = make_pipeline(TfidfVectorizer(), LogisticRegression())

# Train the model
model.fit(texts, labels)

def connect_email():
    """Connects to the email inbox using IMAP."""
    try:
        mail = imaplib.IMAP4_SSL("imap.gmail.com")
        mail.login(EMAIL_USER, EMAIL_PASS)
        mail.select("inbox")
        return mail
    except imaplib.IMAP4.error:
        result_text.set("‚ùå IMAP login failed. Check email/password or enable App Password.")
        return None

def fetch_emails():
    """Fetches emails and updates the UI with results."""
    mail = connect_email()
    if not mail:
        return
    
    _, msg_nums = mail.search(None, "ALL")
    emails = msg_nums[0].split()[-100:]  # Get last 10 emails

    phishing_emails = []
    for num in emails:
        _, msg_data = mail.fetch(num, "(RFC822)")

        for response_part in msg_data:
            if isinstance(response_part, tuple):
                msg = email.message_from_bytes(response_part[1])

                # Decode email subject
                subject, encoding = decode_header(msg["Subject"])[0]
                if isinstance(subject, bytes):
                    subject = subject.decode(encoding or "utf-8")

                # Extract sender
                sender = msg.get("From")

                # Get email body
                body = extract_email_body(msg)

                # Predict if email is phishing
                prediction = predict_email(body)
                if prediction == "Phishing":
                    phishing_emails.append(f"üî¥ {subject}\n   From: {sender}\n")

    mail.logout()

    # Update UI
    if phishing_emails:
        result_text.set("\n‚ö†Ô∏è  Potential Phishing Emails Found! ‚ö†Ô∏è")
        text_box.delete(1.0, tk.END)
        text_box.insert(tk.END, "\n".join(phishing_emails))
    else:
        result_text.set("‚úÖ No phishing emails detected.")
        text_box.delete(1.0, tk.END)

def extract_email_body(msg):
    """Extracts text content from an email message."""
    body = ""
    if msg.is_multipart():
        for part in msg.walk():
            if part.get_content_type() == "text/plain":
                body = part.get_payload(decode=True).decode(errors="ignore")
                break  
    else:
        body = msg.get_payload(decode=True).decode(errors="ignore")
    return body

def predict_email(email_text):
    """Predicts if an email is phishing or legitimate."""
    prediction = model.predict([email_text])[0]
    return "Phishing" if prediction == 1 else "Legitimate"

# GUI Setup
root = tk.Tk()
root.title("Phishing Email Detector")
root.geometry("500x400")

result_text = tk.StringVar()
result_text.set("Click 'Check Emails' to scan.")

tk.Label(root, text="Phishing Email Detector", font=("Arial", 14, "bold")).pack(pady=10)
tk.Label(root, textvariable=result_text, fg="red").pack()

text_box = scrolledtext.ScrolledText(root, width=60, height=15)
text_box.pack(padx=10, pady=10)

tk.Button(root, text="Check Emails", command=fetch_emails, bg="blue", fg="white").pack(pady=5)

root.mainloop()
